#include "stdafx.h"
#include <iostream> 
using namespace std;

string mapLast(char x, char r){
  char xx = x % 10;
  if (x == 0) 
    return r ? "" : "";

  if ((x > 9) && (x < 20))
    return r ? "рублей" : "копеек";

  switch(xx) {
  case 0:
  case 5:
  case 6:
  case 7:
  case 8:
  case 9 :
    return r ? "рублей" : "копеек";
  case 1 :
    return r ? "рубль" : "копейка";
  case 2:
  case 3:
  case 4 :
    return r ? "рубля" : "копейки";
  }
  return "";
}
  
string Group[5][3] = {{"",   "", ""},
		      {"тысяча ",   "тысячи ",    "тысяч "},
		      {"миллион ",  "миллиона ",  "миллионов "},
		      {"миллиард ", "миллиарда ", "миллиардов "},
		      {"триллион ", "триллиона ", "триллионов "}};


string All[4][10] = {{"",
		      "Один ",
		      "Два ",
		      "Три ",
		      "Четыре ",
		      "Пять ",
		      "Шесть ",
		      "Семь ",
		      "Восемь ",
		      "Девять "},
		     {"",
		      "Одна ",
		      "Две ",
		      "Три ",
		      "Четыре ",
		      "Пять ",
		      "Шесть ",
		      "Семь ",
		      "Восемь ",
		      "Девять "}
		     ,
		     {"",
		      "",
		      "Двадцать ",
		      "Тридцать ",
		      "Сорок ",
		      "Пятьдесят ",
		      "Шестьдесят ",
		      "Семдесят ",
		      "Восемдесят ",
		      "Девяносто "},
		     {"",
		      "Сто ",
		      "Двести ",
		      "Триста ",
		      "Четыреста ",
		      "Пятьсот ",
		      "Шестьсот ",
		      "Семьсот ",
		      "Восемсот ",
		      "Девятсот "}};
  
string El_Nine[10] = {"Десять ",
		      "Одиннадцать ",
		      "Двенадцать ",
		      "Тринадцать ",
		      "Четырнадцать ",
		      "Пятнадцать ",
		      "Шестнадцать ",
		      "Семнадцать ",
		      "Восемнадцать ",
		      "Девятнадцать "};


string convertTriplet(int num, int modifier){
  if (modifier >= 5) return "";
  string res = "";
  int h = (num / 100) % 10;
  int t = (num / 10) % 10;
  int o = num % 10;
  res += All[3][h];
  if (t == 1){
    res += El_Nine[o];
  } else {
    res += All[2][t];
    res += All[0][o];
  }
  switch(o) {
  case 0:
    res += "";
    break;	
  case 5:
  case 6:
  case 7:
  case 8:
  case 9 :
    res += Group[modifier][2];
    break;
  case 1 :
    res += Group[modifier][0];
    break;
  case 2:
  case 3:
  case 4 :
    res += Group[modifier][1];
    break;	
  }
  return res;
}

string toText(double number){
  string res = "";
  string s_value = "",
         s_integral = "",
         s_fractional = "";
  
  int i, found = 0, count = 1;
  long long int integral, fractional;

  try {
    s_value = to_string(number);
    for (i = 0; s_value[i] != '\0'; i++)
      {
	if (!found)
	  {
	    if (s_value[i] == '.')
	      {
		found = 1;
		s_integral[i] = '\0';
		continue;
	      }
	    s_integral[i] = s_value[i];
	    count++;
	  }
	else
	  s_fractional[i - count] = s_value[i];
      }
    s_fractional[i - count] = '\0';

    integral = stol(s_integral);
    fractional = stol(s_fractional);
    fractional /= 10000;
    

    
    int lastDigit = integral % 100;
    
    i = 0;
    while (integral != 0){
      res = convertTriplet(integral % 1000, i) + res;
      integral /= 1000;
      i++;
    }
    res += mapLast(lastDigit, 1);
  
    if (fractional < 10) {
      if (fractional != 0) {
	res += (res != "") ? " " : "";
	res += All[1][fractional % 10];
	res += mapLast(fractional, 0);
      }
    } else if (fractional < 20) {
      res += (res != "") ? " " : "";
      res += El_Nine[fractional % 10];
      res += "копеек";
    } else {
      res += (res != "") ? " " : "";
      res += All[2][fractional / 10];
      res += All[1][fractional % 10];
      res += mapLast(fractional, 0);
    }
  } catch (...){
    return "";
  }

  return res;
}

int main(){
  for (double i = 0.0; i < 20; i+=0.01){
    cout << toText(i) << endl;
  }

      cout << toText(1234567890.11) << endl;
      
      system("pause");
      return 0;

}

